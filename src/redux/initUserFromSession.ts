// src/redux/initUserFromSession.ts
import { UserMeAPI } from '../API/Userme';
import type { UserMe } from '../interface/UserInfo';
import { createAsyncThunk } from '@reduxjs/toolkit';
import { setUser } from './loginSlice'; 

export const initUserFromSession = createAsyncThunk<
  UserMe, 
  void,
  { rejectValue: string }
>('auth/initUserFromSession', async (_, { dispatch, rejectWithValue }) => {
  try {
    // üîπ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user –∏–∑ localStorage
    const localUser = localStorage.getItem('user');
    if (localUser) {
      const parsedUser = JSON.parse(localUser) as UserMe;
      dispatch(setUser(parsedUser)); // —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º Redux
    }

    //  –ü–æ–ª—É—á–∞–µ–º user —Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ cookie)
    const user = await UserMeAPI();
    localStorage.setItem('user', JSON.stringify(user));
    return user;
  } catch (error: any) {
    localStorage.removeItem('user');
    return rejectWithValue('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  }
});
